// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: pipeline.proto

package statepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The degree of automation to use when generating/releasing.
type AutomationLevel int32

const (
	// Not used.
	AutomationLevel_AUTOMATION_LEVEL_NONE AutomationLevel = 0
	// Automation is blocked: this API/library should be skipped
	AutomationLevel_AUTOMATION_LEVEL_BLOCKED AutomationLevel = 1
	// Automation can generate changes/releases,
	// but they need to be reviewed.
	AutomationLevel_AUTOMATION_LEVEL_MANUAL_REVIEW AutomationLevel = 2
	// Automation can generated changes/releases which can
	// proceed without further review if all tests pass.
	AutomationLevel_AUTOMATION_LEVEL_AUTOMATIC AutomationLevel = 3
)

// Enum value maps for AutomationLevel.
var (
	AutomationLevel_name = map[int32]string{
		0: "AUTOMATION_LEVEL_NONE",
		1: "AUTOMATION_LEVEL_BLOCKED",
		2: "AUTOMATION_LEVEL_MANUAL_REVIEW",
		3: "AUTOMATION_LEVEL_AUTOMATIC",
	}
	AutomationLevel_value = map[string]int32{
		"AUTOMATION_LEVEL_NONE":          0,
		"AUTOMATION_LEVEL_BLOCKED":       1,
		"AUTOMATION_LEVEL_MANUAL_REVIEW": 2,
		"AUTOMATION_LEVEL_AUTOMATIC":     3,
	}
)

func (x AutomationLevel) Enum() *AutomationLevel {
	p := new(AutomationLevel)
	*p = x
	return p
}

func (x AutomationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutomationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[0].Descriptor()
}

func (AutomationLevel) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[0]
}

func (x AutomationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutomationLevel.Descriptor instead.
func (AutomationLevel) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{0}
}

// Overall state of the generation and release pipeline. This is expected
// to be stored in each language repo as generator-input/pipeline-state.json.
type PipelineState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The image tag that the CLI should use when invoking the
	// language-specific tooling. The image name is assumed by convention, or
	// overridden in PipelineConfig.
	ImageTag string `protobuf:"bytes,1,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
	// The state of each library which is released within this repository.
	Libraries []*LibraryState `protobuf:"bytes,3,rep,name=libraries,proto3" json:"libraries,omitempty"`
	// Paths to files/directories which can trigger
	// a release in all libraries.
	CommonLibrarySourcePaths []string `protobuf:"bytes,4,rep,name=common_library_source_paths,json=commonLibrarySourcePaths,proto3" json:"common_library_source_paths,omitempty"`
	// API paths which are deliberately not configured. (Ideally this would
	// be empty for all languages, but there may be temporary reasons not to configure
	// an API.)
	IgnoredApiPaths []string `protobuf:"bytes,5,rep,name=ignored_api_paths,json=ignoredApiPaths,proto3" json:"ignored_api_paths,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PipelineState) Reset() {
	*x = PipelineState{}
	mi := &file_pipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineState) ProtoMessage() {}

func (x *PipelineState) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineState.ProtoReflect.Descriptor instead.
func (*PipelineState) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineState) GetImageTag() string {
	if x != nil {
		return x.ImageTag
	}
	return ""
}

func (x *PipelineState) GetLibraries() []*LibraryState {
	if x != nil {
		return x.Libraries
	}
	return nil
}

func (x *PipelineState) GetCommonLibrarySourcePaths() []string {
	if x != nil {
		return x.CommonLibrarySourcePaths
	}
	return nil
}

func (x *PipelineState) GetIgnoredApiPaths() []string {
	if x != nil {
		return x.IgnoredApiPaths
	}
	return nil
}

// Generation state of a single library.
type LibraryState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The library identifier (language-specific format)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The last version that was released, if any.
	CurrentVersion string `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// The next version to release (to force a specific version number).
	// This should usually be unset.
	NextVersion string `protobuf:"bytes,3,opt,name=next_version,json=nextVersion,proto3" json:"next_version,omitempty"`
	// The automation level for generation for this library.
	GenerationAutomationLevel AutomationLevel `protobuf:"varint,4,opt,name=generation_automation_level,json=generationAutomationLevel,proto3,enum=google.cloud.sdk.pipeline.AutomationLevel" json:"generation_automation_level,omitempty"`
	// The automation level for releases for this library.
	ReleaseAutomationLevel AutomationLevel `protobuf:"varint,5,opt,name=release_automation_level,json=releaseAutomationLevel,proto3,enum=google.cloud.sdk.pipeline.AutomationLevel" json:"release_automation_level,omitempty"`
	// The timestamp of the latest release. (This is typically
	// some timestamp within the process of generating the release
	// PR for the library. Importantly, it's not just a date as
	// there may be reasons to release a library multiple times
	// within a day.) This is unset if the library has not yet been
	// released.
	ReleaseTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=release_timestamp,json=releaseTimestamp,proto3" json:"release_timestamp,omitempty"`
	// The commit hash (within the API definition repo) at which
	// the library was last generated. This is empty if the library
	// has not yet been generated.
	LastGeneratedCommit string `protobuf:"bytes,7,opt,name=last_generated_commit,json=lastGeneratedCommit,proto3" json:"last_generated_commit,omitempty"`
	// The last-generated commit hash (within the API definition repo)
	// at the point of the last/in-progress release. (This is taken
	// from the generation state at the time of the release.) This
	// is empty if the library has not yet been released.
	LastReleasedCommit string `protobuf:"bytes,8,opt,name=last_released_commit,json=lastReleasedCommit,proto3" json:"last_released_commit,omitempty"`
	// The API paths included in this library, relative to the root
	// of the API definition repo, e.g. "google/cloud/functions/v2".
	ApiPaths []string `protobuf:"bytes,9,rep,name=api_paths,json=apiPaths,proto3" json:"api_paths,omitempty"`
	// Paths to files or directories contributing to this library.
	SourcePaths   []string `protobuf:"bytes,10,rep,name=source_paths,json=sourcePaths,proto3" json:"source_paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LibraryState) Reset() {
	*x = LibraryState{}
	mi := &file_pipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LibraryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryState) ProtoMessage() {}

func (x *LibraryState) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryState.ProtoReflect.Descriptor instead.
func (*LibraryState) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *LibraryState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LibraryState) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *LibraryState) GetNextVersion() string {
	if x != nil {
		return x.NextVersion
	}
	return ""
}

func (x *LibraryState) GetGenerationAutomationLevel() AutomationLevel {
	if x != nil {
		return x.GenerationAutomationLevel
	}
	return AutomationLevel_AUTOMATION_LEVEL_NONE
}

func (x *LibraryState) GetReleaseAutomationLevel() AutomationLevel {
	if x != nil {
		return x.ReleaseAutomationLevel
	}
	return AutomationLevel_AUTOMATION_LEVEL_NONE
}

func (x *LibraryState) GetReleaseTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseTimestamp
	}
	return nil
}

func (x *LibraryState) GetLastGeneratedCommit() string {
	if x != nil {
		return x.LastGeneratedCommit
	}
	return ""
}

func (x *LibraryState) GetLastReleasedCommit() string {
	if x != nil {
		return x.LastReleasedCommit
	}
	return ""
}

func (x *LibraryState) GetApiPaths() []string {
	if x != nil {
		return x.ApiPaths
	}
	return nil
}

func (x *LibraryState) GetSourcePaths() []string {
	if x != nil {
		return x.SourcePaths
	}
	return nil
}

// Manually-maintained configuration for the pipeline.
type PipelineConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the image to use, where the convention is not
	// appropriate. The tag is specified in PipelineState.
	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Specific configuration for each individual command.
	Commands      map[string]*CommandConfig `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineConfig) Reset() {
	*x = PipelineConfig{}
	mi := &file_pipeline_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineConfig) ProtoMessage() {}

func (x *PipelineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineConfig.ProtoReflect.Descriptor instead.
func (*PipelineConfig) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineConfig) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *PipelineConfig) GetCommands() map[string]*CommandConfig {
	if x != nil {
		return x.Commands
	}
	return nil
}

// Configuration for a specific container command.
type CommandConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The environment variables to populate for this command.
	EnvironmentVariables []*CommandEnvironmentVariable `protobuf:"bytes,1,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CommandConfig) Reset() {
	*x = CommandConfig{}
	mi := &file_pipeline_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandConfig) ProtoMessage() {}

func (x *CommandConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandConfig.ProtoReflect.Descriptor instead.
func (*CommandConfig) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *CommandConfig) GetEnvironmentVariables() []*CommandEnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

// An environment variable to be provided to a container command.
type CommandEnvironmentVariable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the environment variable (e.g. TEST_PROJECT).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the secret to be used to fetch the value of the environment
	// variable when it's not present in the host system. If this is not specified,
	// or if a Secret Manager project has not been provided to Librarian,
	// Secret Manager will not be used as a source for the environment variable.
	SecretName string `protobuf:"bytes,2,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// The default value to specify if no other source is found for the environment
	// variable. If this is not provided and no other source is found, the environment
	// variable will not be passed to the container at all.
	DefaultValue  string `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandEnvironmentVariable) Reset() {
	*x = CommandEnvironmentVariable{}
	mi := &file_pipeline_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandEnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandEnvironmentVariable) ProtoMessage() {}

func (x *CommandEnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandEnvironmentVariable.ProtoReflect.Descriptor instead.
func (*CommandEnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *CommandEnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommandEnvironmentVariable) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CommandEnvironmentVariable) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

var File_pipeline_proto protoreflect.FileDescriptor

const file_pipeline_proto_rawDesc = "" +
	"\n" +
	"\x0epipeline.proto\x12\x19google.cloud.sdk.pipeline\x1a\x1fgoogle/protobuf/timestamp.proto\"\xde\x01\n" +
	"\rPipelineState\x12\x1b\n" +
	"\timage_tag\x18\x01 \x01(\tR\bimageTag\x12E\n" +
	"\tlibraries\x18\x03 \x03(\v2'.google.cloud.sdk.pipeline.LibraryStateR\tlibraries\x12=\n" +
	"\x1bcommon_library_source_paths\x18\x04 \x03(\tR\x18commonLibrarySourcePaths\x12*\n" +
	"\x11ignored_api_paths\x18\x05 \x03(\tR\x0fignoredApiPaths\"\xab\x04\n" +
	"\fLibraryState\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0fcurrent_version\x18\x02 \x01(\tR\x0ecurrentVersion\x12!\n" +
	"\fnext_version\x18\x03 \x01(\tR\vnextVersion\x12j\n" +
	"\x1bgeneration_automation_level\x18\x04 \x01(\x0e2*.google.cloud.sdk.pipeline.AutomationLevelR\x19generationAutomationLevel\x12d\n" +
	"\x18release_automation_level\x18\x05 \x01(\x0e2*.google.cloud.sdk.pipeline.AutomationLevelR\x16releaseAutomationLevel\x12G\n" +
	"\x11release_timestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x10releaseTimestamp\x122\n" +
	"\x15last_generated_commit\x18\a \x01(\tR\x13lastGeneratedCommit\x120\n" +
	"\x14last_released_commit\x18\b \x01(\tR\x12lastReleasedCommit\x12\x1b\n" +
	"\tapi_paths\x18\t \x03(\tR\bapiPaths\x12!\n" +
	"\fsource_paths\x18\n" +
	" \x03(\tR\vsourcePaths\"\xeb\x01\n" +
	"\x0ePipelineConfig\x12\x1d\n" +
	"\n" +
	"image_name\x18\x01 \x01(\tR\timageName\x12S\n" +
	"\bcommands\x18\x02 \x03(\v27.google.cloud.sdk.pipeline.PipelineConfig.CommandsEntryR\bcommands\x1ae\n" +
	"\rCommandsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12>\n" +
	"\x05value\x18\x02 \x01(\v2(.google.cloud.sdk.pipeline.CommandConfigR\x05value:\x028\x01\"{\n" +
	"\rCommandConfig\x12j\n" +
	"\x15environment_variables\x18\x01 \x03(\v25.google.cloud.sdk.pipeline.CommandEnvironmentVariableR\x14environmentVariables\"v\n" +
	"\x1aCommandEnvironmentVariable\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vsecret_name\x18\x02 \x01(\tR\n" +
	"secretName\x12#\n" +
	"\rdefault_value\x18\x03 \x01(\tR\fdefaultValue*\x8e\x01\n" +
	"\x0fAutomationLevel\x12\x19\n" +
	"\x15AUTOMATION_LEVEL_NONE\x10\x00\x12\x1c\n" +
	"\x18AUTOMATION_LEVEL_BLOCKED\x10\x01\x12\"\n" +
	"\x1eAUTOMATION_LEVEL_MANUAL_REVIEW\x10\x02\x12\x1e\n" +
	"\x1aAUTOMATION_LEVEL_AUTOMATIC\x10\x03B:Z8github.com/googleapis/librarian/internal/statepb;statepbb\x06proto3"

var (
	file_pipeline_proto_rawDescOnce sync.Once
	file_pipeline_proto_rawDescData []byte
)

func file_pipeline_proto_rawDescGZIP() []byte {
	file_pipeline_proto_rawDescOnce.Do(func() {
		file_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pipeline_proto_rawDesc), len(file_pipeline_proto_rawDesc)))
	})
	return file_pipeline_proto_rawDescData
}

var file_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pipeline_proto_goTypes = []any{
	(AutomationLevel)(0),               // 0: google.cloud.sdk.pipeline.AutomationLevel
	(*PipelineState)(nil),              // 1: google.cloud.sdk.pipeline.PipelineState
	(*LibraryState)(nil),               // 2: google.cloud.sdk.pipeline.LibraryState
	(*PipelineConfig)(nil),             // 3: google.cloud.sdk.pipeline.PipelineConfig
	(*CommandConfig)(nil),              // 4: google.cloud.sdk.pipeline.CommandConfig
	(*CommandEnvironmentVariable)(nil), // 5: google.cloud.sdk.pipeline.CommandEnvironmentVariable
	nil,                                // 6: google.cloud.sdk.pipeline.PipelineConfig.CommandsEntry
	(*timestamppb.Timestamp)(nil),      // 7: google.protobuf.Timestamp
}
var file_pipeline_proto_depIdxs = []int32{
	2, // 0: google.cloud.sdk.pipeline.PipelineState.libraries:type_name -> google.cloud.sdk.pipeline.LibraryState
	0, // 1: google.cloud.sdk.pipeline.LibraryState.generation_automation_level:type_name -> google.cloud.sdk.pipeline.AutomationLevel
	0, // 2: google.cloud.sdk.pipeline.LibraryState.release_automation_level:type_name -> google.cloud.sdk.pipeline.AutomationLevel
	7, // 3: google.cloud.sdk.pipeline.LibraryState.release_timestamp:type_name -> google.protobuf.Timestamp
	6, // 4: google.cloud.sdk.pipeline.PipelineConfig.commands:type_name -> google.cloud.sdk.pipeline.PipelineConfig.CommandsEntry
	5, // 5: google.cloud.sdk.pipeline.CommandConfig.environment_variables:type_name -> google.cloud.sdk.pipeline.CommandEnvironmentVariable
	4, // 6: google.cloud.sdk.pipeline.PipelineConfig.CommandsEntry.value:type_name -> google.cloud.sdk.pipeline.CommandConfig
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pipeline_proto_init() }
func file_pipeline_proto_init() {
	if File_pipeline_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pipeline_proto_rawDesc), len(file_pipeline_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pipeline_proto_goTypes,
		DependencyIndexes: file_pipeline_proto_depIdxs,
		EnumInfos:         file_pipeline_proto_enumTypes,
		MessageInfos:      file_pipeline_proto_msgTypes,
	}.Build()
	File_pipeline_proto = out.File
	file_pipeline_proto_goTypes = nil
	file_pipeline_proto_depIdxs = nil
}
